Token 			 Lexemes
-----------------------------------------
Token: keyword                Lexeme: int
	<Statement>
Token: identifier                Lexeme: i
	<Statement>
Token: separator                Lexeme: ,
	<Statement>
Token: identifier                Lexeme: max
	<Statement>
Token: separator                Lexeme: ,
	<Statement>
Token: identifier                Lexeme: sum
	<Statement>
Token: separator                Lexeme: ;
	<Statement>
Token: identifier                Lexeme: sum
	<Statement>
Token: operator                Lexeme: =
	<Statement>-> <Assign>
Token: integer                Lexeme: 0
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Integer>
Token: separator                Lexeme: ;
	<Term Prime>->epsilon
	<Expression Prime>->epsilon
Token: identifier                Lexeme: i
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: operator                Lexeme: =
Token: integer                Lexeme: 1
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Integer>
Token: separator                Lexeme: ;
	<Term Prime>->epsilon
	<Expression Prime>->epsilon
Token: keyword                Lexeme: get
Token: separator                Lexeme: (
Token: identifier                Lexeme: max
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: separator                Lexeme: )
Token: separator                Lexeme: ;
Token: keyword                Lexeme: while
Token: separator                Lexeme: (
Token: identifier                Lexeme: i
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: operator                Lexeme: <
Token: identifier                Lexeme: max
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Identifier>
Token: separator                Lexeme: )
	<Term Prime>->epsilon
	<Expression Prime>->epsilon
Token: separator                Lexeme: {
Token: identifier                Lexeme: sum
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: operator                Lexeme: =
Token: identifier                Lexeme: sum
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Identifier>
Token: operator                Lexeme: +
	<Term Prime>->epsilon
	<Expression Prime>->+<Term><Expression_Prime>
Token: identifier                Lexeme: i
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Identifier>
Token: separator                Lexeme: ;
	<Term Prime>->epsilon
	<Expression Prime>->epsilon
Token: identifier                Lexeme: i
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: operator                Lexeme: =
Token: identifier                Lexeme: i
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Identifier>
Token: operator                Lexeme: +
	<Term Prime>->epsilon
	<Expression Prime>->+<Term><Expression_Prime>
Token: integer                Lexeme: 1
Token: separator                Lexeme: ;
epsilon
Token: separator                Lexeme: }
Token: keyword                Lexeme: put
Token: separator                Lexeme: (
Token: identifier                Lexeme: sum
<Assign>
	<Assign>-> <Identifier> = <Expression>
Token: operator                Lexeme: +
Token: identifier                Lexeme: max
	<Expression>-><Term><Expression Prime>
	<Term>-> <Factor> <Term Prime>
	<Factor>-><Identifier>
Token: separator                Lexeme: )
	<Term Prime>->epsilon
	<Expression Prime>->epsilon
Token: separator                Lexeme: ;

INSTRUCTION TABLE (without nil oprnds)
Address: 1
Op: POPM
Operand: 5002
Address: 2
Op: POPM
Operand: 5000
Address: 6
Op: POPM
Operand: 5002
Address: 9
Op: POPM
Operand: 5000

SYMBOL TABLE
Key: i
Address: 5000
Type: integer
Key: identifier
Address: 0
Type: 
Key: max
Address: 5001
Type: integer
Key: sum
Address: 5002
Type: integer
